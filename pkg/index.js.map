{
  "version": 3,
  "sources": ["../src/index.ts"],
  "sourcesContent": ["type Options = {\n\twaveformWidth: number;\n\twaveformHeight: number;\n\twaveformColor: string;\n\tbarAlign: string;\n\tbarWidth: number;\n\tbarGap: number;\n\tdrawMode: \"png\" | \"svg\";\n};\n\nconst defaultOptions: Options = {\n\twaveformWidth: 500,\n\twaveformHeight: 80,\n\twaveformColor: \"#000\",\n\tbarAlign: \"center\",\n\tbarWidth: 1,\n\tbarGap: 0,\n\tdrawMode: \"png\",\n};\n\nasync function decodeAudioData(\n\tfileArrayBuffer: ArrayBuffer,\n): Promise<AudioBuffer> {\n\treturn new Promise((resolve, reject) => {\n\t\tconst audioContext = new AudioContext();\n\n\t\taudioContext.decodeAudioData(fileArrayBuffer, (audioBuffer) => {\n\t\t\tif (!audioBuffer) {\n\t\t\t\treject(new Error(\"Could not decode audio data\"));\n\t\t\t} else {\n\t\t\t\tresolve(audioBuffer);\n\t\t\t}\n\t\t});\n\t});\n}\n\nfunction generateNewSVGTarget(width, height): SVGSVGElement {\n\tconst svg = document.createElement(\"svg\");\n\n\tsvg.id = crypto.randomUUID();\n\n\tsvg.setAttribute(\"xmlns\", \"http://www.w3.org/2000/svg\");\n\tsvg.setAttribute(\"version\", \"1.1\");\n\tsvg.setAttributeNS(null, \"viewBox\", `0 0 ${width} ${height}`);\n\n\treturn svg as unknown as SVGSVGElement;\n}\n\nfunction generateNewCanvasTarget(width, height) {\n\tconst canvas = document.createElement(\"canvas\");\n\n\tcanvas.id = crypto.randomUUID();\n\tcanvas.width = width;\n\tcanvas.height = height;\n\n\treturn canvas;\n}\n\nclass WaveformGenerator {\n\t#fileArrayBuffer: ArrayBuffer;\n\t#audioBuffer: AudioBuffer;\n\t#svg: SVGSVGElement;\n\t#canvas: HTMLCanvasElement;\n\t#canvasContext: CanvasRenderingContext2D;\n\t#options: Options = defaultOptions;\n\n\tconstructor(fileArrayBuffer: ArrayBuffer) {\n\t\tthis.#fileArrayBuffer = fileArrayBuffer;\n\t}\n\n\t/**\n\t * Generate the waveform.\n\t */\n\tasync getWaveform(options: Options = defaultOptions): Promise<string> {\n\t\tthis.#options = Object.assign({}, defaultOptions, options);\n\n\t\tconst { waveformWidth, waveformHeight, drawMode } = this.#options;\n\n\t\tif (!this.#audioBuffer) {\n\t\t\tthis.#audioBuffer = await decodeAudioData(this.#fileArrayBuffer.slice(0));\n\t\t}\n\n\t\tif (drawMode === \"png\") {\n\t\t\tthis.#canvas = generateNewCanvasTarget(waveformWidth, waveformHeight);\n\t\t\tthis.#canvasContext = this.#canvas.getContext(\"2d\");\n\t\t} else if (drawMode === \"svg\") {\n\t\t\tthis.#svg = generateNewSVGTarget(waveformWidth, waveformHeight);\n\t\t\tthis.#svg.appendChild(this.generateSVGStylesheet());\n\t\t}\n\n\t\tthis.drawWaveform(this.#audioBuffer);\n\n\t\tif (drawMode === \"png\") {\n\t\t\treturn this.#canvas.toDataURL();\n\t\t}\n\n\t\treturn `data:image/svg+xml;base64,${btoa(\n\t\t\t`<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">${this.#svg.outerHTML}`,\n\t\t)}`;\n\t}\n\n\tgenerateSVGStylesheet(): HTMLStyleElement {\n\t\tconst { waveformColor, barWidth, barGap } = this.#options;\n\t\tconst svgStylesheet = document.createElement(\"style\");\n\n\t\tsvgStylesheet.setAttribute(\"type\", \"text/css\");\n\t\tconst strokeWidth =\n\t\t\tbarGap !== 0 ? barWidth * Math.abs(1 - barGap) : barWidth;\n\t\tsvgStylesheet.appendChild(\n\t\t\tdocument.createTextNode(\n\t\t\t\t`path{stroke:${waveformColor};stroke-width:${strokeWidth}}`,\n\t\t\t),\n\t\t);\n\n\t\treturn svgStylesheet;\n\t}\n\n\tdrawBarToCanvas(x: number, y: number, barHeight: number): void {\n\t\tconst { waveformColor, barWidth } = this.#options;\n\n\t\tconst finalX = Math.floor(x - 1);\n\t\tconst finalY = Math.floor(y - 1);\n\n\t\tthis.#canvasContext.fillStyle = waveformColor;\n\t\tthis.#canvasContext.fillRect(finalX, finalY, barWidth, barHeight);\n\t}\n\n\tdrawBarToSVG(x: number, y: number, barHeight: number): void {\n\t\tconst path = document.createElement(\"path\");\n\t\tpath.setAttribute(\"d\", `M${x} ${y} L${x} ${y + barHeight} Z`);\n\t\tthis.#svg.appendChild(path);\n\t}\n\n\tdrawBar({\n\t\tposition,\n\t\theight,\n\t\tisPositive,\n\t}: {\n\t\tposition: number;\n\t\theight: number;\n\t\tisPositive: boolean;\n\t}): void {\n\t\tconst { barGap, barAlign, waveformHeight, drawMode } = this.#options;\n\t\tlet { barWidth } = this.#options;\n\n\t\tif (barGap !== 0) {\n\t\t\tbarWidth *= Math.abs(1 - barGap);\n\t\t}\n\n\t\tconst x = position + barWidth / 2;\n\t\tconst halfHeight = waveformHeight / 2;\n\t\tlet y: number;\n\n\t\tswitch (barAlign) {\n\t\t\tcase \"top\":\n\t\t\t\ty = 0;\n\t\t\t\tbreak;\n\t\t\tcase \"bottom\":\n\t\t\t\ty = waveformHeight - height;\n\t\t\t\tbreak;\n\t\t\tcase \"center\":\n\t\t\tdefault:\n\t\t\t\ty = isPositive\n\t\t\t\t\t? halfHeight - height // Positive goes upward from center\n\t\t\t\t\t: halfHeight; // Negative starts at center going down\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (drawMode === \"png\") {\n\t\t\tthis.drawBarToCanvas(x, y, height);\n\t\t} else if (drawMode === \"svg\") {\n\t\t\tthis.drawBarToSVG(x, y, height); // Now passing y for SVG too\n\t\t} else {\n\t\t\tthrow new Error(\n\t\t\t\t`Unsupported drawMode in options; ${drawMode}. Allowed: png, svg`,\n\t\t\t);\n\t\t}\n\t}\n\n\tbufferMeasure(position: number, length: number, data: Float32Array): number {\n\t\tlet sum = 0.0;\n\n\t\tfor (let i = position; i < position + length; i++) {\n\t\t\tsum += data[i] ** 2;\n\t\t}\n\n\t\treturn Math.sqrt(sum / length); // Normalizing by 'length' instead of 'data.length'\n\t}\n\n\tdrawWaveform(audioBuffer: AudioBuffer): void {\n\t\tconst leftBuffer = audioBuffer.getChannelData(0);\n\t\tconst rightBuffer =\n\t\t\taudioBuffer.numberOfChannels > 1\n\t\t\t\t? audioBuffer.getChannelData(1)\n\t\t\t\t: leftBuffer; // Mono fallback\n\n\t\tconst { waveformWidth, waveformHeight, barWidth } = this.#options;\n\t\tconst len = Math.floor(leftBuffer.length / waveformWidth);\n\t\tconst halfHeight = waveformHeight / 2;\n\n\t\tconst bars = [];\n\n\t\tfor (let i = 0; i < waveformWidth; i += barWidth) {\n\t\t\tconst leftHeight = this.bufferMeasure(i * len, len, leftBuffer);\n\t\t\tconst rightHeight = this.bufferMeasure(i * len, len, rightBuffer);\n\n\t\t\tbars.push({\n\t\t\t\tposition: i,\n\t\t\t\tpositiveHeight: leftHeight, // Drawn above the centerline\n\t\t\t\tnegativeHeight: rightHeight, // Drawn below the centerline\n\t\t\t});\n\t\t}\n\n\t\tconst maxAmplitude = Math.max(\n\t\t\t...bars.map((b) => Math.max(b.positiveHeight, b.negativeHeight)),\n\t\t);\n\t\tconst scale = halfHeight / maxAmplitude;\n\n\t\tfor (const { position, positiveHeight, negativeHeight } of bars) {\n\t\t\tthis.drawBar({\n\t\t\t\tposition,\n\t\t\t\theight: positiveHeight * scale,\n\t\t\t\tisPositive: true,\n\t\t\t});\n\t\t\tthis.drawBar({\n\t\t\t\tposition,\n\t\t\t\theight: negativeHeight * scale,\n\t\t\t\tisPositive: false,\n\t\t\t});\n\t\t}\n\t}\n}\n\nexport default WaveformGenerator;\n"],
  "mappings": "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",
  "names": ["defaultOptions", "decodeAudioData", "fileArrayBuffer", "resolve", "reject", "audioBuffer", "generateNewSVGTarget", "width", "height", "svg", "generateNewCanvasTarget", "canvas", "_fileArrayBuffer", "_audioBuffer", "_svg", "_canvas", "_canvasContext", "_options", "WaveformGenerator", "__privateAdd", "__privateSet", "options", "waveformWidth", "waveformHeight", "drawMode", "__privateGet", "waveformColor", "barWidth", "barGap", "svgStylesheet", "strokeWidth", "x", "y", "barHeight", "finalX", "finalY", "path", "position", "isPositive", "barAlign", "halfHeight", "length", "data", "sum", "i", "leftBuffer", "rightBuffer", "len", "bars", "leftHeight", "rightHeight", "maxAmplitude", "b", "scale", "positiveHeight", "negativeHeight", "index_default"]
}
