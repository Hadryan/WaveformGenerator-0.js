{"version":3,"sources":["WaveformGenerator.old.js"],"names":["window","AudioContext","webkitAudioContext","Array","prototype","max","Math","apply","this","WaveformGenerator","tmp","bar","width","gap","wave","color","alignment","audioContext","generate","file","waveformWidth","waveformHeight","waveformColor","waveformAlign","barWidth","barGapWidth","returnFunction","arguments","length","error","canvas","document","createElement","undefined","parseInt","height","parseFloat","retFunc","svg","setAttribute","setAttributeNS","svgStyleSheet","styleData","createTextNode","abs","appendChild","reader","FileReader","onload","event","decodeAudioData","target","result","buffer","extractBuffer","readAsArrayBuffer","message","console","getChannelData","sections","len","floor","maxHeight","vals","i","push","bufferMeasure","j","scale","val","drawBar","toDataURL","URL","createObjectURL","Blob","outerHTML","type","position","data","sum","ref","pow","sqrt","h","ctx","getContext","fillStyle","w","x","y","path","fillRect"],"mappings":"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","file":"WaveformGenerator.old.js","sourcesContent":["window.AudioContext = window.AudioContext || window.webkitAudioContext;\r\n\r\nArray.prototype.max = function() {\r\n  return Math.max.apply(null, this);\r\n};\r\n\r\nvar WaveformGenerator = {\r\n    tmp: {\r\n        bar: {\r\n            width: 1,\r\n            gap: 0\r\n        },\r\n        wave: {\r\n            color: '#bada55',\r\n            alignment: 'bottom'\r\n        },\r\n        audioContext: new AudioContext()\r\n    },\r\n    generate: function(file, waveformWidth, waveformHeight, waveformColor, waveformAlign, barWidth, barGapWidth, returnFunction) {\r\n        if (arguments.length !== 8) {\r\n            this.error('Not enough arguments');\r\n            return;\r\n        }\r\n        // Prepare canvas\r\n        this.tmp.canvas = document.createElement('canvas');\r\n        var canvas = this.tmp.canvas;\r\n        // Canvas size\r\n        canvas.width = (waveformWidth !== undefined ? parseInt(waveformWidth) : 200);\r\n        canvas.height = (waveformHeight !== undefined ? parseInt(waveformHeight) : 100);\r\n        // Color and alignment\r\n        this.tmp.wave.color = (waveformColor !== undefined ? waveformColor : 'black');\r\n        this.tmp.wave.alignment = (waveformAlign !== undefined ? waveformAlign : 'black');\r\n        // Bar width and gap\r\n        this.tmp.bar.width = (barWidth !== undefined ? parseInt(barWidth) : 1);\r\n        this.tmp.bar.gap = (barGapWidth !== undefined ? parseFloat(barGapWidth) : 0);\r\n        // Function that fires upon creation of waveform\r\n        this.tmp.retFunc = returnFunction;\r\n        // Prepare SVG\r\n        this.tmp.svg = document.createElement('svg');\r\n        var svg = this.tmp.svg;\r\n        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\r\n        svg.setAttribute('version', '1.1');\r\n        svg.setAttribute('width', '100%');\r\n        svg.setAttribute('height', '100%');\r\n        svg.setAttributeNS(null, 'viewBox', '0 0 ' + canvas.width + ' ' + canvas.height);\r\n        // Styles\r\n        var svgStyleSheet = document.createElement('style');\r\n        svgStyleSheet.setAttribute('type', 'text/css');\r\n        var styleData = document.createTextNode('<![CDATA[path{stroke:' + this.tmp.wave.color + ';stroke-width:' + ((this.tmp.bar.width !== 0) ? (this.tmp.bar.width * Math.abs(1 - this.tmp.bar.gap)) : this.tmp.bar.width) + '}]]>');\r\n        svgStyleSheet.appendChild(styleData);\r\n        svg.appendChild(svgStyleSheet);\r\n        // Load URL to an ArrayBuffer\r\n        var reader = new FileReader();\r\n        reader.onload = function(event) {\r\n            WaveformGenerator.tmp.audioContext.decodeAudioData(event.target.result, function(buffer) {\r\n                WaveformGenerator.extractBuffer(buffer);\r\n            });\r\n        };\r\n        reader.readAsArrayBuffer(file);\r\n    },\r\n    error: function(message) {\r\n        console.error(message);\r\n    },\r\n    extractBuffer: function(buffer) {\r\n      buffer = buffer.getChannelData(0);\r\n      var sections = this.tmp.canvas.width;\r\n      var len = Math.floor(buffer.length / sections);\r\n      var maxHeight = this.tmp.canvas.height;\r\n      var vals = [];\r\n      for (var i = 0; i < sections; i += this.tmp.bar.width) {\r\n          vals.push(this.bufferMeasure(i * len, len, buffer) * 10000);\r\n      }\r\n      for (var j = 0; j < sections; j += this.tmp.bar.width) {\r\n        var scale = maxHeight / vals.max();\r\n        var val = this.bufferMeasure(j * len, len, buffer) * 10000;\r\n        val *= scale;\r\n        val += 1;\r\n        this.drawBar(j, val);\r\n      }\r\n      if (i >= sections) {\r\n        WaveformGenerator.tmp.retFunc(this.tmp.canvas.toDataURL(), URL.createObjectURL(new Blob(['<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + this.tmp.svg.outerHTML], {\r\n            type: 'image/svg+xml'\r\n        })));\r\n      }\r\n    },\r\n    bufferMeasure: function(position, length, data) {\r\n        var sum = 0.0;\r\n        for (var i = position, ref = (position + length) - 1; position <= ref ? i <= ref : i >= ref; position <= ref ? i++ : i--) {\r\n            sum += Math.pow(data[i], 2);\r\n        }\r\n        return Math.sqrt(sum / data.length);\r\n    },\r\n    drawBar: function(i, h) {\r\n        var canvas = this.tmp.canvas;\r\n        var ctx = this.tmp.canvas.getContext('2d');\r\n        ctx.fillStyle = this.tmp.wave.color;\r\n        var w = this.tmp.bar.width;\r\n        if (this.tmp.bar.gap !== 0) {\r\n            w *= Math.abs(1 - this.tmp.bar.gap);\r\n        }\r\n        var x = i + (w / 2),\r\n            y = canvas.height - h,\r\n            path = document.createElement('path');\r\n        y = (this.tmp.wave.alignment === 'center') ? canvas.height / 2 - h / 2 : y;\r\n        path.setAttribute('d', 'M' + x + ' ' + y + ' L' + x + ' ' + y + ' L' + x + ' ' + (y + h) + ' L' + x + ' ' + (y + h) + ' L' + x + ' ' + y + ' Z');\r\n        this.tmp.svg.appendChild(path);\r\n        return ctx.fillRect(x, y, w, h);\r\n    }\r\n};"],"sourceRoot":"/source/"}