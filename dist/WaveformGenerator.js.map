{"version":3,"sources":["WaveformGenerator.js"],"names":["WaveformGenerator","audioBuffer","settingsObject","guid","Math","floor","random","toString","substring","drawBar","index","barHeight","barWidth","settings","barGap","abs","y","x","barAlign","waveformHeight","drawMode","ctx","canvas","getContext","fillStyle","waveformColor","fillRect","path","document","createElement","setAttribute","className","svg","id","appendChild","bufferMeasure","position","length","data","sum","i","ref","pow","sqrt","extractBuffer","buffer","Promise","resolve","reject","getChannelData","sections","waveformWidth","len","maxHeight","vals","push","scale","max","apply","j","val","Error","fileArrayBuffer","audioContext","decodeAudioData","Object","assign","defaultSettings","processId","setAttributeNS","svgStyleSheet","createTextNode","width","height","clearRect","then","svgUrl","URL","createObjectURL","Blob","outerHTML","type","console","log","toDataURL","undefined","AudioContext","WebkitAudioContext"],"mappings":"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","file":"WaveformGenerator.js","sourcesContent":["var WaveformGenerator = (function(audioBuffer, settingsObject) {\n    var settings = undefined;\n\n    var defaultSettings = {\n        waveformWidth: 500,\n        waveformHeight: 80,\n        waveformColor: '#bada55',\n        barAlign: 'center',\n        barWidth: 1,\n        barGap: 0,\n        drawMode: 'png'\n    };\n\n    var audioContext = new AudioContext() || new WebkitAudioContext();\n    var svg = null;\n    var svgStyleSheet = null;\n    var canvas = null;\n\n    function guid() {\n        return 'a' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1) + 'b' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n    }\n\n    function drawBar(index, barHeight) {\n        var barWidth = settings.barWidth;\n\n        if (settings.barGap !== 0) {\n            barWidth *= Math.abs(1 - settings.barGap);\n        }\n\n        var x = index + (barWidth / 2);\n        var y;\n\n        switch (settings.barAlign) {\n            case 'top':\n                y = 0;\n                break;\n            case 'center':\n                y = settings.waveformHeight / 2 - barHeight / 2;\n                break;\n            case 'bottom':\n                y = settings.waveformHeight - barHeight;\n                break;\n        }\n\n        if (settings.drawMode === 'png') {\n            var ctx = canvas.getContext('2d');\n            ctx.fillStyle = settings.waveformColor;\n            ctx.fillRect(x, y, barWidth, barHeight);\n        } else if (settings.drawMode === 'svg') {\n            var path = document.createElement('path');\n\n            path.setAttribute('d', 'M' + x + ' ' + y + ' L' + x + ' ' + y + ' L' + x + ' ' + (y + barHeight) + ' L' + x + ' ' + (y + barHeight) + ' L' + x + ' ' + y + ' Z');\n            path.className = svg.id;\n\n            svg.appendChild(path);\n        }\n    }\n\n    function bufferMeasure(position, length, data) {\n        var sum = 0.0;\n        for (var i = position, ref = (position + length) - 1; position <= ref ? i <= ref : i >= ref; position <= ref ? i++ : i--) {\n            sum += Math.pow(data[i], 2);\n        }\n        return Math.sqrt(sum / data.length);\n    }\n\n    function extractBuffer(buffer) {\n        return new Promise(function(resolve, reject) {\n            buffer = buffer.getChannelData(0);\n            var sections = settings.waveformWidth;\n            var len = Math.floor(buffer.length / sections);\n            var maxHeight = settings.waveformHeight;\n\n            var vals = [];\n\n            var i;\n            for (i = 0; i < sections; i += settings.barWidth) {\n                vals.push(bufferMeasure(i * len, len, buffer) * 10000);\n            }\n\n            var scale = maxHeight / Math.max.apply(null, vals);\n\n            for (var j = 0; j < sections; j += settings.barWidth) {\n                var val = bufferMeasure(j * len, len, buffer) * 10000;\n                val *= scale;\n                val += 1;\n                drawBar(j, val);\n            }\n\n            if (i >= sections) {\n                resolve();\n            }\n\n            if (vals.length <= 0) {\n                reject(new Error('No data to extract'));\n            }\n        });\n    }\n\n    // Constructor\n    function WaveformGenerator(fileArrayBuffer, settingsObject) {\n        return new Promise(function(resolve, reject) {\n            audioContext.decodeAudioData(fileArrayBuffer, function(audioBuffer) {\n                if (!audioBuffer) {\n                    reject(new Error('Could not decode audio data'));\n                    return;\n                }\n\n                settings = Object.assign({}, defaultSettings);\n                settings = Object.assign(settings, settingsObject);\n\n                var processId = guid();\n\n                svg = document.createElement('svg');\n                svg.id = processId;\n                svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n                svg.setAttribute('version', '1.1');\n                svg.setAttributeNS(null, 'viewBox', '0 0 ' + settings.waveformWidth + ' ' + settings.waveformHeight);\n\n                svgStyleSheet = document.createElement('style');\n                svgStyleSheet.setAttribute('type', 'text/css');\n                svgStyleSheet.appendChild(document.createTextNode('<![CDATA[path.' + svg.id + '{stroke:' + settings.waveformColor + ';stroke-width:' + ((settings.barGap !== 0) ? (settings.barWidth * Math.abs(1 - settings.barGap)) : settings.barWidth) + '}]]>'));\n\n                svg.appendChild(svgStyleSheet);\n\n                canvas = document.createElement('canvas');\n                canvas.id = processId;\n                canvas.width = settings.waveformWidth;\n                canvas.height = settings.waveformHeight;\n                var ctx = canvas.getContext('2d');\n                ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n                extractBuffer(audioBuffer).then(function() {\n                    if (settings.drawMode === 'svg') {\n                        var svgUrl = URL.createObjectURL(new Blob(['<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + svg.outerHTML], {\n                            type: 'image/svg+xml'\n                        }));\n                        console.log('Resolving ' + processId);\n                        resolve(svgUrl);\n                    } else if (settings.drawMode === 'png') {\n                        console.log('Resolving ' + processId);\n                        console.log('Resolving canvas #' + canvas.id);\n                        resolve(canvas.toDataURL());\n                    }\n                });\n            });\n        });\n    }\n\n    return WaveformGenerator;\n})();"],"sourceRoot":"/source/"}