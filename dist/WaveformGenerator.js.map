{"version":3,"sources":["WaveformGenerator.js"],"names":["WaveformGenerator","audioBuffer","settingsObject","guid","Math","floor","random","toString","substring","drawBar","index","barHeight","barWidth","settings","barGap","abs","y","x","barAlign","waveformHeight","drawMode","ctx","canvas","getContext","fillStyle","waveformColor","fillRect","path","document","createElement","setAttribute","className","svg","id","appendChild","bufferMeasure","position","length","data","sum","i","ref","pow","sqrt","extractBuffer","buffer","Promise","resolve","reject","getChannelData","sections","waveformWidth","len","maxHeight","bars","values","bar","height","push","scale","max","apply","k","_bar","barPosition","fileArrayBuffer","audioContext","decodeAudioData","Error","Object","assign","defaultSettings","processId","setAttributeNS","svgStyleSheet","createTextNode","width","clearRect","then","svgUrl","URL","createObjectURL","Blob","outerHTML","type","console","log","toDataURL","undefined","AudioContext","WebkitAudioContext"],"mappings":"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","file":"WaveformGenerator.js","sourcesContent":["var WaveformGenerator = (function(audioBuffer, settingsObject) {\n  var settings = undefined;\n\n  var defaultSettings = {\n    waveformWidth: 500,\n    waveformHeight: 80,\n    waveformColor: '#bada55',\n    barAlign: 'center',\n    barWidth: 1,\n    barGap: 0,\n    drawMode: 'png'\n  };\n\n  var audioContext = new AudioContext() || new WebkitAudioContext();\n  var svg = null;\n  var svgStyleSheet = null;\n  var canvas = null;\n\n  function guid() {\n    return 'a' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1) + 'b' + Math.floor((1 + Math.random()) * 0x10000).toString(16).substring(1);\n  }\n\n  function drawBar(index, barHeight) {\n    var barWidth = settings.barWidth;\n\n    if (settings.barGap !== 0) {\n      barWidth *= Math.abs(1 - settings.barGap);\n    }\n\n    var x = index + (barWidth / 2);\n    var y;\n\n    switch (settings.barAlign) {\n      case 'top':\n        y = 0;\n        break;\n      case 'center':\n        y = settings.waveformHeight / 2 - barHeight / 2;\n        break;\n      case 'bottom':\n        y = settings.waveformHeight - barHeight;\n        break;\n    }\n\n    if (settings.drawMode === 'png') {\n      var ctx = canvas.getContext('2d');\n      ctx.fillStyle = settings.waveformColor;\n      ctx.fillRect(x, y, barWidth, barHeight);\n    } else if (settings.drawMode === 'svg') {\n      var path = document.createElement('path');\n\n      path.setAttribute('d', 'M' + x + ' ' + y + ' L' + x + ' ' + y + ' L' + x + ' ' + (y + barHeight) + ' L' + x + ' ' + (y + barHeight) + ' L' + x + ' ' + y + ' Z');\n      path.className = svg.id;\n\n      svg.appendChild(path);\n    }\n  }\n\n  function bufferMeasure(position, length, data) {\n    var sum = 0.0;\n    for (var i = position, ref = (position + length) - 1; position <= ref ? i <= ref : i >= ref; position <= ref ? i++ : i--) {\n      sum += Math.pow(data[i], 2);\n    }\n    return Math.sqrt(sum / data.length);\n  }\n\n  function extractBuffer(buffer) {\n    return new Promise(function(resolve, reject) {\n      buffer = buffer.getChannelData(0);\n      var sections = settings.waveformWidth;\n      var len = Math.floor(buffer.length / sections);\n      var maxHeight = settings.waveformHeight;\n\n      var bars = [];\n      var values = [];\n\n      for (let index = 0; index < sections; index += settings.barWidth) {\n        var bar = {};\n\n        bar.position = index;\n        bar.height = bufferMeasure(index * len, len, buffer);\n\n        values.push(bar.height);\n        bars.push(bar);\n      }\n\n      var scale = maxHeight / Math.max.apply(null, values);\n\n      for (let k = 0; k < bars.length; k++) {\n        let bar = bars[k];\n        let barHeight = bar.height;\n        let barPosition = bar.position;\n        barHeight *= scale;\n        drawBar(barPosition, barHeight);\n      }\n\n      resolve();\n    });\n  }\n\n  // Constructor\n  function WaveformGenerator(fileArrayBuffer, settingsObject) {\n    return new Promise(function(resolve, reject) {\n      audioContext.decodeAudioData(fileArrayBuffer, function(audioBuffer) {\n        if (!audioBuffer) {\n          reject(new Error('Could not decode audio data'));\n          return;\n        }\n\n        settings = Object.assign({}, defaultSettings);\n        settings = Object.assign(settings, settingsObject);\n\n        var processId = guid();\n\n        svg = document.createElement('svg');\n        svg.id = processId;\n        svg.setAttribute('xmlns', 'http://www.w3.org/2000/svg');\n        svg.setAttribute('version', '1.1');\n        svg.setAttributeNS(null, 'viewBox', '0 0 ' + settings.waveformWidth + ' ' + settings.waveformHeight);\n\n        svgStyleSheet = document.createElement('style');\n        svgStyleSheet.setAttribute('type', 'text/css');\n        svgStyleSheet.appendChild(document.createTextNode('<![CDATA[path.' + svg.id + '{stroke:' + settings.waveformColor + ';stroke-width:' + ((settings.barGap !== 0) ? (settings.barWidth * Math.abs(1 - settings.barGap)) : settings.barWidth) + '}]]>'));\n\n        svg.appendChild(svgStyleSheet);\n\n        canvas = document.createElement('canvas');\n        canvas.id = processId;\n        canvas.width = settings.waveformWidth;\n        canvas.height = settings.waveformHeight;\n        var ctx = canvas.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        extractBuffer(audioBuffer).then(function() {\n          if (settings.drawMode === 'svg') {\n            var svgUrl = URL.createObjectURL(new Blob(['<?xml version=\"1.0\" standalone=\"no\"?><!DOCTYPE svg PUBLIC \"-//W3C//DTD SVG 1.1//EN\" \"http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd\">' + svg.outerHTML], {\n              type: 'image/svg+xml'\n            }));\n            console.log('Resolving ' + processId);\n            resolve(svgUrl);\n          } else if (settings.drawMode === 'png') {\n            console.log('Resolving ' + processId);\n            console.log('Resolving canvas #' + canvas.id);\n            resolve(canvas.toDataURL());\n          }\n        });\n      });\n    });\n  }\n\n  return WaveformGenerator;\n})();"],"sourceRoot":"/source/"}